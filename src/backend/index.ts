export type Artifact={id:string;ts:number;studentId:string;payload:any}; export interface ArtifactBackend{ saveArtifact(a:Artifact):Promise<void>; getArtifactsByStudent(studentId:string,limit?:number):Promise<Artifact[]>;} const mem:Artifact[]=[]; export const LocalBackend:ArtifactBackend={ async saveArtifact(a){mem.unshift(a);}, async getArtifactsByStudent(id,limit=50){return mem.filter(x=>x.studentId===id).slice(0,limit);} }; export const FirebaseBackend:ArtifactBackend={ async saveArtifact(a){ const {getFirestore,collection,addDoc}=await import('firebase/firestore'); const db=getFirestore(); await addDoc(collection(db,'artifacts'),a as any); }, async getArtifactsByStudent(studentId,limitN=50){ const {getFirestore,collection,getDocs,query,where,orderBy,limit}=await import('firebase/firestore'); const db=getFirestore(); const q=query(collection(db,'artifacts'),where('studentId','==',studentId),orderBy('ts','desc'),limit(limitN)); const snap=await getDocs(q); return snap.docs.map(d=>d.data() as Artifact); } };
